<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">

	<module name="SuppressionFilter">
		<property name="file"
			value="${config_loc}/checkstyle.config.suppression.xml" />
	</module>

	<!-- Checks that a package.html file exists for each package. -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
	<!--<module name="PackageHtml"/> -->

	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<module name="Translation" />
	<!-- Check for duplicate code -->
	<!-- <module name="StrictDuplicateCode"> <property name="min" value="30" 
		/> </module> -->

	<!-- <module name="FileLength">
		<property name="max" value="1000" />
	</module>-->
	<module name="FileTabCharacter">
		<property name="eachLine" value="true" />
	</module>
	<module name="TreeWalker">
		<!-- Allow CHECKSTYLE:OFF and CHECKSTYLE:ON comments -->
		<module name="SuppressionCommentFilter" />
		<!-- Allow CS:OFF and CS:ON comments for specific checks -->
		<module name="SuppressionCommentFilter">
			<property name="offCommentFormat" value="CS\:OFF[\s]+([\w\|]+)" />
			<property name="onCommentFormat" value="CS\:ON[\s]+([\w\|]+)" />
			<property name="checkFormat" value="$1" />
		</module>
		<!-- Allow SUPPRESS CHECKSTYLE <check> -->
		<module name="SuppressWithNearbyCommentFilter" />

		<!-- Checks for Javadoc comments. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		<!--<module name="JavadocMethod"/> -->
		<!--<module name="JavadocType"/> -->
		<!--<module name="JavadocVariable"/> -->
		<!--<module name="JavadocStyle"/> -->

		<!-- Checks for Naming Conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName" />
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z_][a-z_0-9_]*)*$" />
		</module>
		<module name="LocalFinalVariableName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="LocalVariableName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="MemberName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="ParameterName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="StaticVariableName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="MethodName">
			<property name="format" value="^[a-z][_a-zA-Z0-9]*$" />
		</module>
		<module name="TypeName" />
		<module name="AbstractClassName">
			<property name="format" value="^A[A-Z][a-zA-Z0-9]*$" />
		</module>
		<module name="TypeName">
			<property name="format" value="^I[A-Z][a-zA-Z0-9]*$" />
			<property name="tokens" value="INTERFACE_DEF" />
		</module>
		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<!--<module name="AvoidStarImport"/> -->
		<module name="IllegalImport">
			<property name="illegalPkgs"
				value="sun, javax.transaction, com.mysql, org.hsqldb, java.util.logging, org.apache.log4j, org.apache.commons.logging, org.springframework.test.annotation, junit.framework, org.hibernate.annotations" />
		</module>
		<module name="RedundantImport" />
		<module name="UnusedImports" />


		<!-- Checks for Size Violations. -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<!-- <module name="LineLength"> <property name="max" value="120"/> </module> -->
		<module name="MethodLength">
			<property name="max" value="300" />
		</module>
		<module name="ParameterNumber" />
		<module name="AnonInnerLength">
			<property name="max" value="300" />
		</module>


		<!-- Checks for whitespace -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForIteratorPad" />
		<module name="MethodParamPad" />
		<!--<module name="NoWhitespaceAfter"/> -->
		<!--<module name="NoWhitespaceBefore"/> -->
		<!--<module name="ParenPad" /> -->
		<module name="TypecastParenPad" />
		<!--<module name="WhitespaceAfter"/> -->
		<!--<module name="WhitespaceAround"/> -->


		<!-- Modifier Checks -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder" />
		<module name="RedundantModifier" />
		<!-- Checks for blocks. You know, those {}'s -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true" />
		</module>
		<module name="EmptyBlock" />
		<module name="EmptyStatement" />
		<module name="LeftCurly" />
		<module name="NeedBraces" />
		<module name="RightCurly" />

		<!-- Checks for common coding problems -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!--<module name="AvoidInlineConditionals"/> -->
		<module name="EmptyStatement" />
		<module name="EqualsHashCode" />
		<!--<module name="HiddenField"/> -->
		<!--<module name="ArrayTrailingComma"/> -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean" />
		</module>
		<module name="InnerAssignment" />
		<!-- <module name="MagicNumber"> <property name="ignoreNumbers" value="-1, 
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9"/> </module> -->
		<module name="EqualsAvoidNull" />
		<module name="MissingSwitchDefault" />
		<module name="SimplifyBooleanExpression" />
		<module name="SimplifyBooleanReturn" />
		<module name="BooleanExpressionComplexity">
			<property name="max" value="5" />
		</module>
		<module name="CovariantEquals" />
		<module name="PackageAnnotation" />
		<module name="FinalLocalVariable" />
		<module name="MissingOverride" />
		<module name="StringLiteralEquality" />
		<module name="SuperClone" />
		<module name="SuperFinalize" />
		<!-- <module name="JUnitTestCase" /> -->
		<module name="DeclarationOrder" />
		<module name="ParameterAssignment" />
		<!--<module name="ExplicitInitialization"/> -->
		<module name="DefaultComesLast" />
		<!-- <module name="MultipleStringLiterals"> <property name="ignoreStringsRegexp" 
			value="^&quot;&quot;$|^&quot;\W&quot;$|^&quot; \W &quot;$|^&quot;\W &quot;$|^&quot;\\n&quot;$"/> 
			</module> -->
		<!-- <module name="MultipleVariableDeclarations" /> -->
		<module name="NestedIfDepth">
			<property name="max" value="3" />
		</module>
		<module name="NestedTryDepth">
			<property name="max" value="2" />
		</module>
		<!-- removed from 6.2 :/ <module name="RedundantThrows"> <property name="logLoadErrors" 
			value="true" /> <property name="suppressLoadErrors" value="true" /> </module> -->
		<!-- <module name="IllegalCatch" /> -->
		<!-- <module name="IllegalThrows" /> -->
		<!--<module name="RequireThis"/> -->
		<module name="ThrowsCount">
			<property name="max" value="3" />
		</module>
		<module name="MutableException" />
		<module name="ReturnCount">
			<property name="max" value="20" />
			<property name="maxForVoid" value="20" />
		</module>

		<!-- Checks for class design -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<!--<module name="DesignForExtension"/> -->
		<module name="FinalClass" />
		<module name="HideUtilityClassConstructor" />
		<!-- <module name="InterfaceIsType"> <property name="allowMarkerInterfaces" 
			value="true" /> </module> -->
		<module name="VisibilityModifier">
			<property name="protectedAllowed" value="true" />
		</module>
		<module name="CyclomaticComplexity">
			<property name="max" value="20" />
		</module>
		<module name="NPathComplexity" />
		<module name="JavaNCSS">
			<property name="methodMaximum" value="100" />
		</module>
		<module name="ClassFanOutComplexity">
			<property name="max" value="40" />
		</module>
		<module name="ClassDataAbstractionCoupling">
			<property name="max" value="20" />
		</module>
		<module name="IllegalType">
			<property name="format" value="null" />
		</module>

		<!-- Miscellaneous other checks. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle" />
		<module name="FinalParameters" />
		<!-- <module name="RegexpSinglelineJava"> <property name="ignoreComments" 
			value="true"/> <property name="format" value="\s+$"/> <property name="message" 
			value="Line has trailing spaces."/> </module> -->
		<module name="RegexpSinglelineJava">
			<property name="format" value="System\.(out|err)\.print" />
			<property name="message" value="Use Log instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="\.printStackTrace" />
			<property name="message" value="Use Err instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="new\s+UR(L|I)\(" />
			<property name="message" value="Use URIs.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="new\s+(ReentrantLock|ReentrantReadWriteLock)\(" />
			<property name="message" value="Use Threads.getCycleDetectingLockFactory().new... instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="new\s+NoSuchElementException\(" />
			<property name="message" value="Use FastNoSuchElementException instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="UrlUtils\.toUrlSafe\(" />
			<property name="message" value="Use URIs.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*(Dates|DateUtil(s)?);" />
			<property name="message" value="Use de.invesdwin...FDate instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="InetAddress\.getByName\(" />
			<property name="message" value="Use NetworkUtil.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(com\.mysql\.stereotype\..*|org.springframework.stereotype\.(Component|Repository));" />
			<property name="message" value="Use @Named instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(javax.annotation.Resource|org\.springframework\.beans\.factory\.annotation\.(Autowired|Qualifier));" />
			<property name="message" value="Use @Inject instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.springframework\.beans\.factory\.annotation\.(Required|Value);" />
			<property name="message"
				value="This annotation is not allowed. No real use for it at the moment." />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+java\.util\.concurrent\.(Executors|ScheduledThreadPoolExecutor|ThreadPoolExecutor);" />
			<property name="message" value="Use de.invesdwin...* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+com\.mysema\.commons\.lang\.CloseableIterator;" />
			<property name="message"
				value="Use de.invesdwin...ICloseableIterator instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+.*(Logger|LoggerFactory);" />
			<property name="message" value="Use de.invesdwin...Log instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*\.(Assert(ions)?|Preconditions);" />
			<property name="message" value="Use de.invesdwin...Assertions.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(com\.google\.common\.base\.Strings|.*\.StringUtil(s)?);" />
			<property name="message" value="Use Strings.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+.*org\.apache\.commons\.lang\." />
			<property name="message" value="Use org.apache.commons.lang3.* instead" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org\.jdesktop\.application\.Task;(.*[\n])*.*new Task(\)|\&lt;)" />
			<property name="message"
				value="new Task() is not allowed. Use ATask instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module
			name="de.invesdwin.checkstyle.StackOverflowErrorIgnoringRegexpCheck">
			<property name="format"
				value="(interface [a-zA-Z0-9\s&lt;&gt;&amp;\[\],\./*?]* \{|(@Immutable|@ThreadSafe|@NotThreadSafe)(.*[\r\n])*.*(class|enum) [a-zA-Z0-9\s&lt;&gt;&amp;\[\],\./*?]* \{)" />
			<property name="message"
				value="Classes should be annotated with @Immutable, @ThreadSafe or @NotThreadSafe" />
			<property name="illegalPattern" value="false" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="System\.(get|set|clear)Propert(y|ies)" />
			<property name="message" value="Use SystemProperties.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="&quot;.*\{\}.*&quot;" />
			<property name="message" value="Use %s instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*(Reflection(Util)?(s)?|GenericTypeResolver);" />
			<property name="message" value="Use Reflections.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="(SwingUtilities|EventQueue)\.(invokeLater|invokeAndWait)" />
			<property name="message" value="Use EventDispatchThreadUtil.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+.*OptionPane;" />
			<property name="message" value="Use Dialogs.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin|com\.mysema|com\.querydsl).*(Tuple|Pair|Triple|Quadruple);" />
			<property name="message" value="Use de.invesdwin...* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*(Booleans|Bytes|Characters|Chars|Shorts|Ints|Integers|Longs|Floats|Doubles|BigIntegers|BigDecimals);" />
			<property name="message" value="Use de.invesdwin...* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+(?!de\.invesdwin).*Duration;" />
			<property name="message" value="Use de.invesdwin...Duration instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+(?!de\.invesdwin).*Instant;" />
			<property name="message" value="Use de.invesdwin...Instant instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+(net\.sf|org)\.ehcache.*;" />
			<property name="message" value="Use javax.cache.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*\.Object(Util)?(s)?;" />
			<property name="message" value="Use de.invesdwin...Objects instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="hashCode().*\+.*&quot;&quot;.*\+ .*\.hashCode()" />
			<property name="message" value="Use Objects.hashcode(...) instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.springframework\.cache\.annotation.*;" />
			<property name="message" value="Use javax.cache.annotation.* instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.springframework\.data\.repository\.cdi\.Eager;" />
			<property name="message" value="Maybe you wanted de.invesdwin...*.Eager?" />
		</module>
		<module name="RegexpSinglelineJava">
			<!-- https://jira.springsource.org/browse/SPR-9616 -->
			<property name="format"
				value="import\s+org\.springframework\.context\.annotation\.ClassPathScanningCandidateComponentProvider;" />
			<property name="message" value="Use de.invesdwin.*.ClassPathScanner instead" />
		</module>
		<!-- <module name="RegexpSinglelineJava"> <property name="format" value="&lt;&gt;" 
			/> <property name="message" value="The diamond operator should not be used 
			because it hides other errors in eclipse..." /> </module> -->
		<module name="RegexpSinglelineJava">
			<property name="format" value="new\s+(Big)?(Integer|Decimal)\((-)?[0-9]+\)" />
			<property name="message" value="Use the String constructor instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="@Controller\(.+\)" />
			<property name="message"
				value="@Controller cannot define a different component name. This prevents the mapping from being found. Change the class name instead." />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*\.Index(es|Collection)?;" />
			<property name="message"
				value="Use de.invesdwin...Index(es) instead, these annotations will be converted properly between ORMs" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(?!de\.invesdwin).*\.Persistence(Unit|Context)(s)?;" />
			<property name="message"
				value="Use de.invesdwin...PersistenceUnitName on class level instead;
			 or @Transactional with the appropriate transaction manager name;
			 or implements IPersistenceUnitAware and make sure the bean is available in the ApplicationContext" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="(interface [a-zA-Z0-9 &lt;&gt;,\./*?[\s]]* \{|(@Entity|@MappedSuperclass|@Embeddable)(.*[\n])*.*(class|enum) [a-zA-Z0-9\s&lt;&gt;,\./*?]* \{)(.*[\n])*.*private Decimal .*;" />
			<property name="message"
				value="Field type Decimal is not allowed in JPA mapped classes. Use BigDecimal as the field type instead and map to/from Decimal in the getters and setters instead. This is because there is no easy way to ensure a type mapping in all ORMs." />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="(interface [a-zA-Z0-9 &lt;&gt;,\./*?[\s]]* \{|(@Entity|@MappedSuperclass|@Embeddable)(.*[\n])*.*(class|enum) [a-zA-Z0-9\s&lt;&gt;,\./*?]* \{)(.*[\n])*.*private FDate .*;" />
			<property name="message"
				value="Field type FDate is not allowed in JPA mapped classes. Use Date as the field type instead and map to/from FDate in the getters and setters instead. This is because there is no easy way to ensure a type mapping in all ORMs." />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="TimeZone\.getTimeZone\(" />
			<property name="message"
				value="Use de.invesdwin...TimeZones.getTimeZone(...) instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format" value="import\s+org\.apache\.hadoop\.mapred\..*;" />
			<property name="message"
				value="Use org.apache.hadoop.mapreduce.* instead for MR2" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.apache\.hadoop\.mapreduce\.Reducer;" />
			<property name="message" value="Use de.invesdwin...AReducer instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.apache\.hadoop\.mapreduce\.Mapper;" />
			<property name="message" value="Use de.invesdwin...AMapper instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.springframework\.batch\.core\.(launch\.JobOperator|explore\.JobExplorer|configuration\.JobRegistry|launch\.JobLauncher|repository\.JobRepository);" />
			<property name="message" value="Use de.invesdwin...IJobService instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+(com\.google\.common\.collect\.Lists|org\.apache\.commons\.collections4\.ListUtils);" />
			<property name="message" value="Use de.invesdwin...Lists instead" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="import\s+org\.apache\.commons\.collections\..*;" />
			<property name="message"
				value="Use org.apache.commons.collections4... instead" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+org\.apache\.wicket\.(Page|markup\.html\.WebPage);(.*[\n])*.* extends (Page|WebPage) " />
			<property name="message" value="Use de.invesdwin...AWebPage instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format" value="import\s+.*\.SerializationUtils" />
			<property name="message" value="Use de.invesdwin...Objects instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="RegexpSinglelineJava">
			<property name="format"
				value="(new\s+(Date|(Gregorian)?Calendar)\(.*\)|Calendar\.getInstance\(\))" />
			<property name="message" value="Use de.invesdwin...FDate instead" />
		</module>
		<module name="Regexp">
			<property name="format" value="import\s+.*\.(Simple|Fast)DateFormat" />
			<property name="message"
				value="Use de.invesdwin...FDate.toString(...) instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org\.apache\.wicket\.authroles\.authorization\.strategies\.role\.Roles" />
			<property name="message" value="Use de.invesdwin...Roles instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*(org\.apache\.wicket\.authroles\.authentication\.AuthenticatedWebSession|org\.apache\.wicket\.authroles\.authentication\.AbstractAuthenticatedWebSession|org\.apache\.wicket\.protocol\.http\.WebSession|org\.apache\.wicket\.Session)" />
			<property name="message" value="Use de.invesdwin...AWebSession instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*(org\.apache\.wicket\.authroles\.authentication\.AuthenticatedWebApplication|org\.apache\.wicket\.protocol\.http\.WebApplication|org\.apache\.wicket\.Application)" />
			<property name="message" value="Use de.invesdwin...AWebApplication instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org\.springframework\.expression\..*" />
			<property name="message"
				value="Use de.invesdwin...Roles.get().evaluate(...) instead in invesdwin-client-wicket; otherwise rather don't use SPEL" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format" value="import\s+.*org\.junit\.platform\..*" />
			<property name="message" value="Use Junit 4 for now..." />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org\.junit\.jupiter\.api\.(A-Za-z);" />
			<property name="message" value="Use Junit 4 for now..." />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org\.junit\.jupiter\.api\.extension\.(A-Za-z);" />
			<property name="message" value="Use Junit 4 for now..." />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*org.apache.wicket.authroles.authentication.(pages|panel)..*" />
			<property name="message" value="Use de.invesdwin... instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+(?!org\.apache\.commons\.io)\.IOUtils;" />
			<property name="message" value="Use org.apache.commons.io.IOUtils instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format" value="import\s+(?!de\.invesdwin\.).*\.Throwables;" />
			<property name="message" value="Use de.invesdwin..Throwables instead" />
			<property name="illegalPattern" value="true" />
		</module>
		<module name="Regexp">
			<property name="format"
				value="import\s+.*com\.google\.errorprone\.annotations\..*;" />
			<property name="message" value="Use javax.annotation..* instead" />
			<property name="illegalPattern" value="true" />
		</module>



		<!--<module name="TodoComment"/> -->
		<module name="UpperEll" />
		<module name="UncommentedMain">
			<property name="excludedClasses" value=".Main$" />
		</module>

		<module name="DescendantToken">
			<!-- initializer in for loop performs no setup (use while instead?) -->
			<property name="tokens" value="FOR_INIT" />
			<property name="limitedTokens" value="EXPR" />
			<property name="minimumNumber" value="1" />
		</module>

		<module name="de.invesdwin.checkstyle.InternalImportCheck" />
		<module name="de.invesdwin.checkstyle.NotNullParameterAnnotationCheck" />
	</module>

</module>
